extend type Query {
  myCollectionsList(input: CollectionsListInput!): CollectionsListResp!
    @hasRole(role: COLLECTOR)
  myCollectionDetail(collectionID: KSUID!): Collection!
    @hasRole(role: COLLECTOR)
  collectionsList(input: CollectionsListInput!): CollectionsListResp!
    @hasRole(role: ADMIN)
}
extend type Mutation {
  createMyCollection(input: CollectionInput!): CreateCollectionResp!
    @hasRole(role: COLLECTOR)
  updateMyCollection(input: UpdateCollectionInput!): UpdateCollectionResp!
  deleteMyCollection(collectionId: KSUID!): DeleteMyCollectionResp!
}

# INPUTS

input CollectionsListInput {
  paging: PagingInput!
}

input CollectionInput {
  title: String
  description: String
  type: String
}

input UpdateCollectionInput {
  id: KSUID!
  collection: CollectionInput!
  fieldsToUpdate: [CollectionField!]!
}

# ENUMS

enum CollectionField {
  title
  description
  type
}

# TYPES

type Collection {
  id: KSUID!
  title: String!
  description: String
  type: String
  createdAt: Date!
  updatedAt: Date!
}

type Meta {
  total: Int!
  prevPage: Paging
  currentPage: Paging!
  nextPage: Paging
}

# RESPONSES

type CollectionsListResp {
  items: [Collection!]!
  meta: Meta!
}

type CreateCollectionResp {
  success: Boolean!
  data: Collection
}

type UpdateCollectionResp {
  success: Boolean!
  data: Collection
}

type DeleteMyCollectionResp {
  success: Boolean!
}
