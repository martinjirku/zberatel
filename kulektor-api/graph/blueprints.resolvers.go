package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"jirku.sk/kulektor/db"
	"jirku.sk/kulektor/graph/model"
	"jirku.sk/kulektor/grid"
	"jirku.sk/kulektor/ksuid"
)

// CreateBlueprint is the resolver for the createBlueprint field.
func (r *mutationResolver) CreateBlueprint(ctx context.Context, input model.BlueprintInput) (*model.CreateBlueprintResp, error) {
	blueprintDb := db.CreateBlueprintParams{
		ID:          ksuid.NewKSUID(),
		Description: input.Description,
		Title:       *input.Title,
	}
	b, err := r.Queries.CreateBlueprint(ctx, blueprintDb)
	if err != nil {
		return &model.CreateBlueprintResp{Success: false}, fmt.Errorf("creating collection: %s", err)
	}
	blueprint := model.BlueprintFromDb(b)
	return &model.CreateBlueprintResp{
		Success: true,
		Data:    &blueprint,
	}, nil
}

// UpdateBlueprint is the resolver for the updateBlueprint field.
func (r *mutationResolver) UpdateBlueprint(ctx context.Context, input model.UpdateBlueprintInput) (*model.UpdateBlueprintResp, error) {
	fields := make([]string, 0, len(input.FieldsToUpdate))
	for _, f := range input.FieldsToUpdate {
		fields = append(fields, string(f))
	}
	blueprint := db.Blueprint{
		ID:          input.ID,
		Description: input.Blueprint.Description,
	}
	if input.Blueprint.Title != nil {
		blueprint.Title = *input.Blueprint.Title
	}
	output, err := r.Queries.UpdateBlueprint(ctx, blueprint, fields)
	if err != nil {
		return &model.UpdateBlueprintResp{}, fmt.Errorf("updating collection: %s", err)
	}
	b := model.BlueprintFromDb(output)
	return &model.UpdateBlueprintResp{
		Success: true,
		Data:    &b,
	}, nil
}

// BlueprintsList is the resolver for the blueprintsList field.
func (r *queryResolver) BlueprintsList(ctx context.Context, input model.BlueprintsListInput) (*model.BlueprintsListResp, error) {
	params := db.GetUsersCollectionsListParams{
		Limit:  int32(input.Paging.GetLimit()),
		Offset: int32(input.Paging.GetOffset()),
	}

	total, err := r.Queries.ListBlueprintsCount(ctx, []db.Filter{})
	if err != nil {
		return nil, fmt.Errorf("requesting total list with offset %d, limit %d: %s", params.Offset, params.Limit, err)
	}

	paging := grid.NewPaging(input.Paging.Limit, input.Paging.Offset)
	items, err := r.Queries.ListBlueprints(ctx, []db.Filter{}, paging.GetOffset(), paging.GetLimit())
	if err != nil {
		return nil, fmt.Errorf("requesting collection list with offset %d, limit %d: %s", params.Offset, params.Limit, err)
	}
	blueprints := make([]model.Blueprint, 0, len(items))
	for _, i := range items {
		blueprints = append(blueprints, model.BlueprintFromDb(i))
	}

	meta := model.Meta{
		Total:       int(total),
		PrevPage:    input.Paging.PrevPage(),
		CurrentPage: input.Paging.CurrentPage(),
		NextPage:    input.Paging.NextPage(total),
	}

	return &model.BlueprintsListResp{
		Items: blueprints,
		Meta:  &meta,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
