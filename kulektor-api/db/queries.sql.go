// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"jirku.sk/kulektor/ksuid"
)

const createBlueprint = `-- name: CreateBlueprint :one
INSERT INTO blueprints (id, title, description)
VALUES ($1, $2, $3)
RETURNING id, user_id, title, description, created_at, updated_at
`

type CreateBlueprintParams struct {
	ID          ksuid.KSUID `db:"id" json:"id"`
	Title       string      `db:"title" json:"title"`
	Description *string     `db:"description" json:"description"`
}

func (q *Queries) CreateBlueprint(ctx context.Context, arg CreateBlueprintParams) (Blueprint, error) {
	row := q.db.QueryRow(ctx, createBlueprint, arg.ID, arg.Title, arg.Description)
	var i Blueprint
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (id, user_id, title, description, type)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, title, description, type, created_at, updated_at, blueprint_id
`

type CreateCollectionParams struct {
	ID          ksuid.KSUID `db:"id" json:"id"`
	UserID      string      `db:"user_id" json:"userId"`
	Title       string      `db:"title" json:"title"`
	Description *string     `db:"description" json:"description"`
	Type        *string     `db:"type" json:"type"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRow(ctx, createCollection,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Type,
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlueprintID,
	)
	return i, err
}

const deleteUserCollectionByID = `-- name: DeleteUserCollectionByID :exec
DELETE FROM collections where id = $1 AND user_id = $2
`

type DeleteUserCollectionByIDParams struct {
	ID     ksuid.KSUID `db:"id" json:"id"`
	UserID string      `db:"user_id" json:"userId"`
}

func (q *Queries) DeleteUserCollectionByID(ctx context.Context, arg DeleteUserCollectionByIDParams) error {
	_, err := q.db.Exec(ctx, deleteUserCollectionByID, arg.ID, arg.UserID)
	return err
}

const getUserCollectionByID = `-- name: GetUserCollectionByID :one
SELECT id, user_id, title, description, type, created_at, updated_at, blueprint_id FROM collections WHERE id = $1 AND user_id = $2
`

type GetUserCollectionByIDParams struct {
	ID     ksuid.KSUID `db:"id" json:"id"`
	UserID string      `db:"user_id" json:"userId"`
}

func (q *Queries) GetUserCollectionByID(ctx context.Context, arg GetUserCollectionByIDParams) (Collection, error) {
	row := q.db.QueryRow(ctx, getUserCollectionByID, arg.ID, arg.UserID)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlueprintID,
	)
	return i, err
}

const getUsersCollectionListTotal = `-- name: GetUsersCollectionListTotal :one
SELECT count(*) FROM collections WHERE user_id = $1
`

func (q *Queries) GetUsersCollectionListTotal(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getUsersCollectionListTotal, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUsersCollectionsList = `-- name: GetUsersCollectionsList :many
SELECT id, user_id, title, description, type, created_at, updated_at, blueprint_id FROM collections WHERE user_id = $1 OFFSET $2 LIMIT $3
`

type GetUsersCollectionsListParams struct {
	UserID string `db:"user_id" json:"userId"`
	Offset int32  `db:"offset" json:"offset"`
	Limit  int32  `db:"limit" json:"limit"`
}

func (q *Queries) GetUsersCollectionsList(ctx context.Context, arg GetUsersCollectionsListParams) ([]Collection, error) {
	rows, err := q.db.Query(ctx, getUsersCollectionsList, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BlueprintID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const count = `-- name: count :one
SELECT count(*) as counts FROM blueprints
`

func (q *Queries) count(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, count)
	var counts int64
	err := row.Scan(&counts)
	return counts, err
}
